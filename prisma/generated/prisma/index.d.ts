// Code generated by Prisma (prisma@1.18.0). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode, GraphQLSchema } from "graphql";
import { IResolvers } from "graphql-tools/dist/Interfaces";
import { makePrismaClientClass, BaseClientOptions } from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  auth: (where?: AuthWhereInput) => Promise<boolean>;
  config: (where?: ConfigWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
  widget: (where?: WidgetWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;
  $getAbstractResolvers(filterSchema?: GraphQLSchema | string): IResolvers;

  /**
   * Queries
   */

  auth: (where: AuthWhereUniqueInput) => Auth;
  auths: (
    args?: {
      where?: AuthWhereInput;
      orderBy?: AuthOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<AuthNode>;
  authsConnection: (
    args?: {
      where?: AuthWhereInput;
      orderBy?: AuthOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => AuthConnection;
  configs: (
    args?: {
      where?: ConfigWhereInput;
      orderBy?: ConfigOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<ConfigNode>;
  configsConnection: (
    args?: {
      where?: ConfigWhereInput;
      orderBy?: ConfigOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => ConfigConnection;
  user: (where: UserWhereUniqueInput) => User;
  users: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<UserNode>;
  usersConnection: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => UserConnection;
  widget: (where: WidgetWhereUniqueInput) => Widget;
  widgets: (
    args?: {
      where?: WidgetWhereInput;
      orderBy?: WidgetOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<WidgetNode>;
  widgetsConnection: (
    args?: {
      where?: WidgetWhereInput;
      orderBy?: WidgetOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => WidgetConnection;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createAuth: (data: AuthCreateInput) => Auth;
  updateAuth: (
    args: { data: AuthUpdateInput; where: AuthWhereUniqueInput }
  ) => Auth;
  updateManyAuths: (
    args: { data: AuthUpdateInput; where?: AuthWhereInput }
  ) => BatchPayload;
  upsertAuth: (
    args: {
      where: AuthWhereUniqueInput;
      create: AuthCreateInput;
      update: AuthUpdateInput;
    }
  ) => Auth;
  deleteAuth: (where: AuthWhereUniqueInput) => Auth;
  deleteManyAuths: (where?: AuthWhereInput) => BatchPayload;
  createConfig: (data: ConfigCreateInput) => Config;
  updateManyConfigs: (
    args: { data: ConfigUpdateInput; where?: ConfigWhereInput }
  ) => BatchPayload;
  deleteManyConfigs: (where?: ConfigWhereInput) => BatchPayload;
  createUser: (data: UserCreateInput) => User;
  updateUser: (
    args: { data: UserUpdateInput; where: UserWhereUniqueInput }
  ) => User;
  updateManyUsers: (
    args: { data: UserUpdateInput; where?: UserWhereInput }
  ) => BatchPayload;
  upsertUser: (
    args: {
      where: UserWhereUniqueInput;
      create: UserCreateInput;
      update: UserUpdateInput;
    }
  ) => User;
  deleteUser: (where: UserWhereUniqueInput) => User;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayload;
  createWidget: (data: WidgetCreateInput) => Widget;
  updateWidget: (
    args: { data: WidgetUpdateInput; where: WidgetWhereUniqueInput }
  ) => Widget;
  updateManyWidgets: (
    args: { data: WidgetUpdateInput; where?: WidgetWhereInput }
  ) => BatchPayload;
  upsertWidget: (
    args: {
      where: WidgetWhereUniqueInput;
      create: WidgetCreateInput;
      update: WidgetUpdateInput;
    }
  ) => Widget;
  deleteWidget: (where: WidgetWhereUniqueInput) => Widget;
  deleteManyWidgets: (where?: WidgetWhereInput) => BatchPayload;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  auth: (
    where?: AuthSubscriptionWhereInput
  ) => AuthSubscriptionPayloadSubscription;
  config: (
    where?: ConfigSubscriptionWhereInput
  ) => ConfigSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
  widget: (
    where?: WidgetSubscriptionWhereInput
  ) => WidgetSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type AuthOrderByInput =
  | "Id_ASC"
  | "Id_DESC"
  | "Type_ASC"
  | "Type_DESC"
  | "AccessToken_ASC"
  | "AccessToken_DESC"
  | "RefreshToken_ASC"
  | "RefreshToken_DESC"
  | "Expire_ASC"
  | "Expire_DESC"
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type ConfigOrderByInput =
  | "PosX_ASC"
  | "PosX_DESC"
  | "PosY_ASC"
  | "PosY_DESC"
  | "Height_ASC"
  | "Height_DESC"
  | "MinHeight_ASC"
  | "MinHeight_DESC"
  | "MaxHeight_ASC"
  | "MaxHeight_DESC"
  | "Width_ASC"
  | "Width_DESC"
  | "MinWidth_ASC"
  | "MinWidth_DESC"
  | "MaxWidth_ASC"
  | "MaxWidth_DESC"
  | "Static_ASC"
  | "Static_DESC"
  | "Location_ASC"
  | "Location_DESC"
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type WidgetOrderByInput =
  | "Id_ASC"
  | "Id_DESC"
  | "Name_ASC"
  | "Name_DESC"
  | "SlugName_ASC"
  | "SlugName_DESC"
  | "Enable_ASC"
  | "Enable_DESC"
  | "NeedAuth_ASC"
  | "NeedAuth_DESC"
  | "Authenticate_ASC"
  | "Authenticate_DESC"
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserOrderByInput =
  | "Id_ASC"
  | "Id_DESC"
  | "Name_ASC"
  | "Name_DESC"
  | "Passwd_ASC"
  | "Passwd_DESC"
  | "Email_ASC"
  | "Email_DESC"
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface AuthUpdateInput {
  Id?: ID_Input;
  Type?: String;
  AccessToken?: String;
  RefreshToken?: String;
  Expire?: Int;
}

export type AuthWhereUniqueInput = AtLeastOne<{
  Id: ID_Input;
}>;

export interface UserWhereInput {
  Id?: ID_Input;
  Id_not?: ID_Input;
  Id_in?: ID_Input[] | ID_Input;
  Id_not_in?: ID_Input[] | ID_Input;
  Id_lt?: ID_Input;
  Id_lte?: ID_Input;
  Id_gt?: ID_Input;
  Id_gte?: ID_Input;
  Id_contains?: ID_Input;
  Id_not_contains?: ID_Input;
  Id_starts_with?: ID_Input;
  Id_not_starts_with?: ID_Input;
  Id_ends_with?: ID_Input;
  Id_not_ends_with?: ID_Input;
  Name?: String;
  Name_not?: String;
  Name_in?: String[] | String;
  Name_not_in?: String[] | String;
  Name_lt?: String;
  Name_lte?: String;
  Name_gt?: String;
  Name_gte?: String;
  Name_contains?: String;
  Name_not_contains?: String;
  Name_starts_with?: String;
  Name_not_starts_with?: String;
  Name_ends_with?: String;
  Name_not_ends_with?: String;
  Passwd?: String;
  Passwd_not?: String;
  Passwd_in?: String[] | String;
  Passwd_not_in?: String[] | String;
  Passwd_lt?: String;
  Passwd_lte?: String;
  Passwd_gt?: String;
  Passwd_gte?: String;
  Passwd_contains?: String;
  Passwd_not_contains?: String;
  Passwd_starts_with?: String;
  Passwd_not_starts_with?: String;
  Passwd_ends_with?: String;
  Passwd_not_ends_with?: String;
  Email?: String;
  Email_not?: String;
  Email_in?: String[] | String;
  Email_not_in?: String[] | String;
  Email_lt?: String;
  Email_lte?: String;
  Email_gt?: String;
  Email_gte?: String;
  Email_contains?: String;
  Email_not_contains?: String;
  Email_starts_with?: String;
  Email_not_starts_with?: String;
  Email_ends_with?: String;
  Email_not_ends_with?: String;
  WidgetSpec_every?: WidgetWhereInput;
  WidgetSpec_some?: WidgetWhereInput;
  WidgetSpec_none?: WidgetWhereInput;
  AND?: UserWhereInput[] | UserWhereInput;
  OR?: UserWhereInput[] | UserWhereInput;
  NOT?: UserWhereInput[] | UserWhereInput;
}

export interface UserCreateInput {
  Id: ID_Input;
  Name: String;
  Passwd: String;
  Email: String;
  WidgetSpec?: WidgetCreateManyInput;
}

export interface ConfigUpdateDataInput {
  PosX?: Int;
  PosY?: Int;
  Height?: Int;
  MinHeight?: Int;
  MaxHeight?: Int;
  Width?: Int;
  MinWidth?: Int;
  MaxWidth?: Int;
  Static?: Boolean;
  Location?: String;
}

export interface ConfigUpdateInput {
  PosX?: Int;
  PosY?: Int;
  Height?: Int;
  MinHeight?: Int;
  MaxHeight?: Int;
  Width?: Int;
  MinWidth?: Int;
  MaxWidth?: Int;
  Static?: Boolean;
  Location?: String;
}

export interface ConfigUpdateOneRequiredInput {
  create?: ConfigCreateInput;
  update?: ConfigUpdateDataInput;
  upsert?: ConfigUpsertNestedInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWhereInput;
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  NOT?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
}

export interface WidgetUpdateDataInput {
  Id?: ID_Input;
  Name?: String;
  SlugName?: String;
  Config?: ConfigUpdateOneRequiredInput;
  Enable?: Boolean;
  NeedAuth?: Boolean;
  Authenticate?: Boolean;
  Authentication?: AuthUpdateOneRequiredInput;
}

export interface ConfigWhereInput {
  PosX?: Int;
  PosX_not?: Int;
  PosX_in?: Int[] | Int;
  PosX_not_in?: Int[] | Int;
  PosX_lt?: Int;
  PosX_lte?: Int;
  PosX_gt?: Int;
  PosX_gte?: Int;
  PosY?: Int;
  PosY_not?: Int;
  PosY_in?: Int[] | Int;
  PosY_not_in?: Int[] | Int;
  PosY_lt?: Int;
  PosY_lte?: Int;
  PosY_gt?: Int;
  PosY_gte?: Int;
  Height?: Int;
  Height_not?: Int;
  Height_in?: Int[] | Int;
  Height_not_in?: Int[] | Int;
  Height_lt?: Int;
  Height_lte?: Int;
  Height_gt?: Int;
  Height_gte?: Int;
  MinHeight?: Int;
  MinHeight_not?: Int;
  MinHeight_in?: Int[] | Int;
  MinHeight_not_in?: Int[] | Int;
  MinHeight_lt?: Int;
  MinHeight_lte?: Int;
  MinHeight_gt?: Int;
  MinHeight_gte?: Int;
  MaxHeight?: Int;
  MaxHeight_not?: Int;
  MaxHeight_in?: Int[] | Int;
  MaxHeight_not_in?: Int[] | Int;
  MaxHeight_lt?: Int;
  MaxHeight_lte?: Int;
  MaxHeight_gt?: Int;
  MaxHeight_gte?: Int;
  Width?: Int;
  Width_not?: Int;
  Width_in?: Int[] | Int;
  Width_not_in?: Int[] | Int;
  Width_lt?: Int;
  Width_lte?: Int;
  Width_gt?: Int;
  Width_gte?: Int;
  MinWidth?: Int;
  MinWidth_not?: Int;
  MinWidth_in?: Int[] | Int;
  MinWidth_not_in?: Int[] | Int;
  MinWidth_lt?: Int;
  MinWidth_lte?: Int;
  MinWidth_gt?: Int;
  MinWidth_gte?: Int;
  MaxWidth?: Int;
  MaxWidth_not?: Int;
  MaxWidth_in?: Int[] | Int;
  MaxWidth_not_in?: Int[] | Int;
  MaxWidth_lt?: Int;
  MaxWidth_lte?: Int;
  MaxWidth_gt?: Int;
  MaxWidth_gte?: Int;
  Static?: Boolean;
  Static_not?: Boolean;
  Location?: String;
  Location_not?: String;
  Location_in?: String[] | String;
  Location_not_in?: String[] | String;
  Location_lt?: String;
  Location_lte?: String;
  Location_gt?: String;
  Location_gte?: String;
  Location_contains?: String;
  Location_not_contains?: String;
  Location_starts_with?: String;
  Location_not_starts_with?: String;
  Location_ends_with?: String;
  Location_not_ends_with?: String;
  AND?: ConfigWhereInput[] | ConfigWhereInput;
  OR?: ConfigWhereInput[] | ConfigWhereInput;
  NOT?: ConfigWhereInput[] | ConfigWhereInput;
}

export interface WidgetUpdateWithWhereUniqueNestedInput {
  where: WidgetWhereUniqueInput;
  data: WidgetUpdateDataInput;
}

export interface AuthSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: AuthWhereInput;
  AND?: AuthSubscriptionWhereInput[] | AuthSubscriptionWhereInput;
  OR?: AuthSubscriptionWhereInput[] | AuthSubscriptionWhereInput;
  NOT?: AuthSubscriptionWhereInput[] | AuthSubscriptionWhereInput;
}

export type WidgetWhereUniqueInput = AtLeastOne<{
  Id: ID_Input;
}>;

export interface WidgetUpsertWithWhereUniqueNestedInput {
  where: WidgetWhereUniqueInput;
  update: WidgetUpdateDataInput;
  create: WidgetCreateInput;
}

export interface WidgetUpdateManyInput {
  create?: WidgetCreateInput[] | WidgetCreateInput;
  update?:
    | WidgetUpdateWithWhereUniqueNestedInput[]
    | WidgetUpdateWithWhereUniqueNestedInput;
  upsert?:
    | WidgetUpsertWithWhereUniqueNestedInput[]
    | WidgetUpsertWithWhereUniqueNestedInput;
  delete?: WidgetWhereUniqueInput[] | WidgetWhereUniqueInput;
  connect?: WidgetWhereUniqueInput[] | WidgetWhereUniqueInput;
  disconnect?: WidgetWhereUniqueInput[] | WidgetWhereUniqueInput;
}

export type UserWhereUniqueInput = AtLeastOne<{
  Id: ID_Input;
}>;

export interface UserUpdateInput {
  Id?: ID_Input;
  Name?: String;
  Passwd?: String;
  Email?: String;
  WidgetSpec?: WidgetUpdateManyInput;
}

export interface WidgetWhereInput {
  Id?: ID_Input;
  Id_not?: ID_Input;
  Id_in?: ID_Input[] | ID_Input;
  Id_not_in?: ID_Input[] | ID_Input;
  Id_lt?: ID_Input;
  Id_lte?: ID_Input;
  Id_gt?: ID_Input;
  Id_gte?: ID_Input;
  Id_contains?: ID_Input;
  Id_not_contains?: ID_Input;
  Id_starts_with?: ID_Input;
  Id_not_starts_with?: ID_Input;
  Id_ends_with?: ID_Input;
  Id_not_ends_with?: ID_Input;
  Name?: String;
  Name_not?: String;
  Name_in?: String[] | String;
  Name_not_in?: String[] | String;
  Name_lt?: String;
  Name_lte?: String;
  Name_gt?: String;
  Name_gte?: String;
  Name_contains?: String;
  Name_not_contains?: String;
  Name_starts_with?: String;
  Name_not_starts_with?: String;
  Name_ends_with?: String;
  Name_not_ends_with?: String;
  SlugName?: String;
  SlugName_not?: String;
  SlugName_in?: String[] | String;
  SlugName_not_in?: String[] | String;
  SlugName_lt?: String;
  SlugName_lte?: String;
  SlugName_gt?: String;
  SlugName_gte?: String;
  SlugName_contains?: String;
  SlugName_not_contains?: String;
  SlugName_starts_with?: String;
  SlugName_not_starts_with?: String;
  SlugName_ends_with?: String;
  SlugName_not_ends_with?: String;
  Config?: ConfigWhereInput;
  Enable?: Boolean;
  Enable_not?: Boolean;
  NeedAuth?: Boolean;
  NeedAuth_not?: Boolean;
  Authenticate?: Boolean;
  Authenticate_not?: Boolean;
  Authentication?: AuthWhereInput;
  AND?: WidgetWhereInput[] | WidgetWhereInput;
  OR?: WidgetWhereInput[] | WidgetWhereInput;
  NOT?: WidgetWhereInput[] | WidgetWhereInput;
}

export interface AuthCreateOneInput {
  create?: AuthCreateInput;
  connect?: AuthWhereUniqueInput;
}

export interface ConfigUpsertNestedInput {
  update: ConfigUpdateDataInput;
  create: ConfigCreateInput;
}

export interface ConfigSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: ConfigWhereInput;
  AND?: ConfigSubscriptionWhereInput[] | ConfigSubscriptionWhereInput;
  OR?: ConfigSubscriptionWhereInput[] | ConfigSubscriptionWhereInput;
  NOT?: ConfigSubscriptionWhereInput[] | ConfigSubscriptionWhereInput;
}

export interface WidgetUpdateInput {
  Id?: ID_Input;
  Name?: String;
  SlugName?: String;
  Config?: ConfigUpdateOneRequiredInput;
  Enable?: Boolean;
  NeedAuth?: Boolean;
  Authenticate?: Boolean;
  Authentication?: AuthUpdateOneRequiredInput;
}

export interface AuthCreateInput {
  Id: ID_Input;
  Type: String;
  AccessToken: String;
  RefreshToken: String;
  Expire: Int;
}

export interface AuthUpdateDataInput {
  Id?: ID_Input;
  Type?: String;
  AccessToken?: String;
  RefreshToken?: String;
  Expire?: Int;
}

export interface ConfigCreateInput {
  PosX: Int;
  PosY: Int;
  Height: Int;
  MinHeight: Int;
  MaxHeight: Int;
  Width: Int;
  MinWidth: Int;
  MaxWidth: Int;
  Static: Boolean;
  Location: String;
}

export interface WidgetCreateManyInput {
  create?: WidgetCreateInput[] | WidgetCreateInput;
  connect?: WidgetWhereUniqueInput[] | WidgetWhereUniqueInput;
}

export interface WidgetCreateInput {
  Id: ID_Input;
  Name: String;
  SlugName: String;
  Config: ConfigCreateOneInput;
  Enable: Boolean;
  NeedAuth: Boolean;
  Authenticate: Boolean;
  Authentication: AuthCreateOneInput;
}

export interface ConfigCreateOneInput {
  create?: ConfigCreateInput;
}

export interface AuthUpdateOneRequiredInput {
  create?: AuthCreateInput;
  update?: AuthUpdateDataInput;
  upsert?: AuthUpsertNestedInput;
  connect?: AuthWhereUniqueInput;
}

export interface AuthUpsertNestedInput {
  update: AuthUpdateDataInput;
  create: AuthCreateInput;
}

export interface AuthWhereInput {
  Id?: ID_Input;
  Id_not?: ID_Input;
  Id_in?: ID_Input[] | ID_Input;
  Id_not_in?: ID_Input[] | ID_Input;
  Id_lt?: ID_Input;
  Id_lte?: ID_Input;
  Id_gt?: ID_Input;
  Id_gte?: ID_Input;
  Id_contains?: ID_Input;
  Id_not_contains?: ID_Input;
  Id_starts_with?: ID_Input;
  Id_not_starts_with?: ID_Input;
  Id_ends_with?: ID_Input;
  Id_not_ends_with?: ID_Input;
  Type?: String;
  Type_not?: String;
  Type_in?: String[] | String;
  Type_not_in?: String[] | String;
  Type_lt?: String;
  Type_lte?: String;
  Type_gt?: String;
  Type_gte?: String;
  Type_contains?: String;
  Type_not_contains?: String;
  Type_starts_with?: String;
  Type_not_starts_with?: String;
  Type_ends_with?: String;
  Type_not_ends_with?: String;
  AccessToken?: String;
  AccessToken_not?: String;
  AccessToken_in?: String[] | String;
  AccessToken_not_in?: String[] | String;
  AccessToken_lt?: String;
  AccessToken_lte?: String;
  AccessToken_gt?: String;
  AccessToken_gte?: String;
  AccessToken_contains?: String;
  AccessToken_not_contains?: String;
  AccessToken_starts_with?: String;
  AccessToken_not_starts_with?: String;
  AccessToken_ends_with?: String;
  AccessToken_not_ends_with?: String;
  RefreshToken?: String;
  RefreshToken_not?: String;
  RefreshToken_in?: String[] | String;
  RefreshToken_not_in?: String[] | String;
  RefreshToken_lt?: String;
  RefreshToken_lte?: String;
  RefreshToken_gt?: String;
  RefreshToken_gte?: String;
  RefreshToken_contains?: String;
  RefreshToken_not_contains?: String;
  RefreshToken_starts_with?: String;
  RefreshToken_not_starts_with?: String;
  RefreshToken_ends_with?: String;
  RefreshToken_not_ends_with?: String;
  Expire?: Int;
  Expire_not?: Int;
  Expire_in?: Int[] | Int;
  Expire_not_in?: Int[] | Int;
  Expire_lt?: Int;
  Expire_lte?: Int;
  Expire_gt?: Int;
  Expire_gte?: Int;
  AND?: AuthWhereInput[] | AuthWhereInput;
  OR?: AuthWhereInput[] | AuthWhereInput;
  NOT?: AuthWhereInput[] | AuthWhereInput;
}

export interface WidgetSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: WidgetWhereInput;
  AND?: WidgetSubscriptionWhereInput[] | WidgetSubscriptionWhereInput;
  OR?: WidgetSubscriptionWhereInput[] | WidgetSubscriptionWhereInput;
  NOT?: WidgetSubscriptionWhereInput[] | WidgetSubscriptionWhereInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface WidgetPreviousValuesNode {
  Id: ID_Output;
  Name: String;
  SlugName: String;
  Enable: Boolean;
  NeedAuth: Boolean;
  Authenticate: Boolean;
}

export interface WidgetPreviousValues
  extends Promise<WidgetPreviousValuesNode>,
    Fragmentable {
  Id: () => Promise<ID_Output>;
  Name: () => Promise<String>;
  SlugName: () => Promise<String>;
  Enable: () => Promise<Boolean>;
  NeedAuth: () => Promise<Boolean>;
  Authenticate: () => Promise<Boolean>;
}

export interface WidgetPreviousValuesSubscription
  extends Promise<AsyncIterator<WidgetPreviousValuesNode>>,
    Fragmentable {
  Id: () => Promise<AsyncIterator<ID_Output>>;
  Name: () => Promise<AsyncIterator<String>>;
  SlugName: () => Promise<AsyncIterator<String>>;
  Enable: () => Promise<AsyncIterator<Boolean>>;
  NeedAuth: () => Promise<AsyncIterator<Boolean>>;
  Authenticate: () => Promise<AsyncIterator<Boolean>>;
}

export interface ConfigEdgeNode {
  cursor: String;
}

export interface ConfigEdge extends Promise<ConfigEdgeNode>, Fragmentable {
  node: <T = Config>() => T;
  cursor: () => Promise<String>;
}

export interface ConfigEdgeSubscription
  extends Promise<AsyncIterator<ConfigEdgeNode>>,
    Fragmentable {
  node: <T = ConfigSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AuthConnectionNode {}

export interface AuthConnection
  extends Promise<AuthConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = FragmentableArray<AuthEdgeNode>>() => T;
  aggregate: <T = AggregateAuth>() => T;
}

export interface AuthConnectionSubscription
  extends Promise<AsyncIterator<AuthConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<AuthEdgeSubscription>>>() => T;
  aggregate: <T = AggregateAuthSubscription>() => T;
}

export interface ConfigConnectionNode {}

export interface ConfigConnection
  extends Promise<ConfigConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = FragmentableArray<ConfigEdgeNode>>() => T;
  aggregate: <T = AggregateConfig>() => T;
}

export interface ConfigConnectionSubscription
  extends Promise<AsyncIterator<ConfigConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ConfigEdgeSubscription>>>() => T;
  aggregate: <T = AggregateConfigSubscription>() => T;
}

export interface PageInfoNode {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfo extends Promise<PageInfoNode>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfoNode>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface ConfigNode {
  PosX: Int;
  PosY: Int;
  Height: Int;
  MinHeight: Int;
  MaxHeight: Int;
  Width: Int;
  MinWidth: Int;
  MaxWidth: Int;
  Static: Boolean;
  Location: String;
}

export interface Config extends Promise<ConfigNode>, Fragmentable {
  PosX: () => Promise<Int>;
  PosY: () => Promise<Int>;
  Height: () => Promise<Int>;
  MinHeight: () => Promise<Int>;
  MaxHeight: () => Promise<Int>;
  Width: () => Promise<Int>;
  MinWidth: () => Promise<Int>;
  MaxWidth: () => Promise<Int>;
  Static: () => Promise<Boolean>;
  Location: () => Promise<String>;
}

export interface ConfigSubscription
  extends Promise<AsyncIterator<ConfigNode>>,
    Fragmentable {
  PosX: () => Promise<AsyncIterator<Int>>;
  PosY: () => Promise<AsyncIterator<Int>>;
  Height: () => Promise<AsyncIterator<Int>>;
  MinHeight: () => Promise<AsyncIterator<Int>>;
  MaxHeight: () => Promise<AsyncIterator<Int>>;
  Width: () => Promise<AsyncIterator<Int>>;
  MinWidth: () => Promise<AsyncIterator<Int>>;
  MaxWidth: () => Promise<AsyncIterator<Int>>;
  Static: () => Promise<AsyncIterator<Boolean>>;
  Location: () => Promise<AsyncIterator<String>>;
}

export interface BatchPayloadNode {
  count: Long;
}

export interface BatchPayload extends Promise<BatchPayloadNode>, Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayloadNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface AuthNode {
  Id: ID_Output;
  Type: String;
  AccessToken: String;
  RefreshToken: String;
  Expire: Int;
}

export interface Auth extends Promise<AuthNode>, Fragmentable {
  Id: () => Promise<ID_Output>;
  Type: () => Promise<String>;
  AccessToken: () => Promise<String>;
  RefreshToken: () => Promise<String>;
  Expire: () => Promise<Int>;
}

export interface AuthSubscription
  extends Promise<AsyncIterator<AuthNode>>,
    Fragmentable {
  Id: () => Promise<AsyncIterator<ID_Output>>;
  Type: () => Promise<AsyncIterator<String>>;
  AccessToken: () => Promise<AsyncIterator<String>>;
  RefreshToken: () => Promise<AsyncIterator<String>>;
  Expire: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateWidgetNode {
  count: Int;
}

export interface AggregateWidget
  extends Promise<AggregateWidgetNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateWidgetSubscription
  extends Promise<AsyncIterator<AggregateWidgetNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AuthSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface AuthSubscriptionPayload
  extends Promise<AuthSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Auth>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = AuthPreviousValues>() => T;
}

export interface AuthSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<AuthSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = AuthSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = AuthPreviousValuesSubscription>() => T;
}

export interface WidgetConnectionNode {}

export interface WidgetConnection
  extends Promise<WidgetConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = FragmentableArray<WidgetEdgeNode>>() => T;
  aggregate: <T = AggregateWidget>() => T;
}

export interface WidgetConnectionSubscription
  extends Promise<AsyncIterator<WidgetConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<WidgetEdgeSubscription>>>() => T;
  aggregate: <T = AggregateWidgetSubscription>() => T;
}

export interface AuthPreviousValuesNode {
  Id: ID_Output;
  Type: String;
  AccessToken: String;
  RefreshToken: String;
  Expire: Int;
}

export interface AuthPreviousValues
  extends Promise<AuthPreviousValuesNode>,
    Fragmentable {
  Id: () => Promise<ID_Output>;
  Type: () => Promise<String>;
  AccessToken: () => Promise<String>;
  RefreshToken: () => Promise<String>;
  Expire: () => Promise<Int>;
}

export interface AuthPreviousValuesSubscription
  extends Promise<AsyncIterator<AuthPreviousValuesNode>>,
    Fragmentable {
  Id: () => Promise<AsyncIterator<ID_Output>>;
  Type: () => Promise<AsyncIterator<String>>;
  AccessToken: () => Promise<AsyncIterator<String>>;
  RefreshToken: () => Promise<AsyncIterator<String>>;
  Expire: () => Promise<AsyncIterator<Int>>;
}

export interface UserEdgeNode {
  cursor: String;
}

export interface UserEdge extends Promise<UserEdgeNode>, Fragmentable {
  node: <T = User>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdgeNode>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface UserConnectionNode {}

export interface UserConnection
  extends Promise<UserConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = FragmentableArray<UserEdgeNode>>() => T;
  aggregate: <T = AggregateUser>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface UserSubscriptionPayload
  extends Promise<UserSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = User>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValues>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface WidgetNode {
  Id: ID_Output;
  Name: String;
  SlugName: String;
  Enable: Boolean;
  NeedAuth: Boolean;
  Authenticate: Boolean;
}

export interface Widget extends Promise<WidgetNode>, Fragmentable {
  Id: () => Promise<ID_Output>;
  Name: () => Promise<String>;
  SlugName: () => Promise<String>;
  Config: <T = Config>() => T;
  Enable: () => Promise<Boolean>;
  NeedAuth: () => Promise<Boolean>;
  Authenticate: () => Promise<Boolean>;
  Authentication: <T = Auth>() => T;
}

export interface WidgetSubscription
  extends Promise<AsyncIterator<WidgetNode>>,
    Fragmentable {
  Id: () => Promise<AsyncIterator<ID_Output>>;
  Name: () => Promise<AsyncIterator<String>>;
  SlugName: () => Promise<AsyncIterator<String>>;
  Config: <T = ConfigSubscription>() => T;
  Enable: () => Promise<AsyncIterator<Boolean>>;
  NeedAuth: () => Promise<AsyncIterator<Boolean>>;
  Authenticate: () => Promise<AsyncIterator<Boolean>>;
  Authentication: <T = AuthSubscription>() => T;
}

export interface AggregateAuthNode {
  count: Int;
}

export interface AggregateAuth
  extends Promise<AggregateAuthNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateAuthSubscription
  extends Promise<AsyncIterator<AggregateAuthNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface WidgetSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface WidgetSubscriptionPayload
  extends Promise<WidgetSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Widget>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = WidgetPreviousValues>() => T;
}

export interface WidgetSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<WidgetSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = WidgetSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = WidgetPreviousValuesSubscription>() => T;
}

export interface AuthEdgeNode {
  cursor: String;
}

export interface AuthEdge extends Promise<AuthEdgeNode>, Fragmentable {
  node: <T = Auth>() => T;
  cursor: () => Promise<String>;
}

export interface AuthEdgeSubscription
  extends Promise<AsyncIterator<AuthEdgeNode>>,
    Fragmentable {
  node: <T = AuthSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ConfigPreviousValuesNode {
  PosX: Int;
  PosY: Int;
  Height: Int;
  MinHeight: Int;
  MaxHeight: Int;
  Width: Int;
  MinWidth: Int;
  MaxWidth: Int;
  Static: Boolean;
  Location: String;
}

export interface ConfigPreviousValues
  extends Promise<ConfigPreviousValuesNode>,
    Fragmentable {
  PosX: () => Promise<Int>;
  PosY: () => Promise<Int>;
  Height: () => Promise<Int>;
  MinHeight: () => Promise<Int>;
  MaxHeight: () => Promise<Int>;
  Width: () => Promise<Int>;
  MinWidth: () => Promise<Int>;
  MaxWidth: () => Promise<Int>;
  Static: () => Promise<Boolean>;
  Location: () => Promise<String>;
}

export interface ConfigPreviousValuesSubscription
  extends Promise<AsyncIterator<ConfigPreviousValuesNode>>,
    Fragmentable {
  PosX: () => Promise<AsyncIterator<Int>>;
  PosY: () => Promise<AsyncIterator<Int>>;
  Height: () => Promise<AsyncIterator<Int>>;
  MinHeight: () => Promise<AsyncIterator<Int>>;
  MaxHeight: () => Promise<AsyncIterator<Int>>;
  Width: () => Promise<AsyncIterator<Int>>;
  MinWidth: () => Promise<AsyncIterator<Int>>;
  MaxWidth: () => Promise<AsyncIterator<Int>>;
  Static: () => Promise<AsyncIterator<Boolean>>;
  Location: () => Promise<AsyncIterator<String>>;
}

export interface ConfigSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface ConfigSubscriptionPayload
  extends Promise<ConfigSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Config>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ConfigPreviousValues>() => T;
}

export interface ConfigSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ConfigSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ConfigSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ConfigPreviousValuesSubscription>() => T;
}

export interface UserNode {
  Id: ID_Output;
  Name: String;
  Passwd: String;
  Email: String;
}

export interface User extends Promise<UserNode>, Fragmentable {
  Id: () => Promise<ID_Output>;
  Name: () => Promise<String>;
  Passwd: () => Promise<String>;
  Email: () => Promise<String>;
  WidgetSpec: <T = FragmentableArray<WidgetNode>>(
    args?: {
      where?: WidgetWhereInput;
      orderBy?: WidgetOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<UserNode>>,
    Fragmentable {
  Id: () => Promise<AsyncIterator<ID_Output>>;
  Name: () => Promise<AsyncIterator<String>>;
  Passwd: () => Promise<AsyncIterator<String>>;
  Email: () => Promise<AsyncIterator<String>>;
  WidgetSpec: <T = Promise<AsyncIterator<WidgetSubscription>>>(
    args?: {
      where?: WidgetWhereInput;
      orderBy?: WidgetOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface UserPreviousValuesNode {
  Id: ID_Output;
  Name: String;
  Passwd: String;
  Email: String;
}

export interface UserPreviousValues
  extends Promise<UserPreviousValuesNode>,
    Fragmentable {
  Id: () => Promise<ID_Output>;
  Name: () => Promise<String>;
  Passwd: () => Promise<String>;
  Email: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValuesNode>>,
    Fragmentable {
  Id: () => Promise<AsyncIterator<ID_Output>>;
  Name: () => Promise<AsyncIterator<String>>;
  Passwd: () => Promise<AsyncIterator<String>>;
  Email: () => Promise<AsyncIterator<String>>;
}

export interface AggregateConfigNode {
  count: Int;
}

export interface AggregateConfig
  extends Promise<AggregateConfigNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateConfigSubscription
  extends Promise<AsyncIterator<AggregateConfigNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateUserNode {
  count: Int;
}

export interface AggregateUser
  extends Promise<AggregateUserNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUserNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface WidgetEdgeNode {
  cursor: String;
}

export interface WidgetEdge extends Promise<WidgetEdgeNode>, Fragmentable {
  node: <T = Widget>() => T;
  cursor: () => Promise<String>;
}

export interface WidgetEdgeSubscription
  extends Promise<AsyncIterator<WidgetEdgeNode>>,
    Fragmentable {
  node: <T = WidgetSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

export type Long = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/**
 * Type Defs
 */

export const prisma: Prisma;
