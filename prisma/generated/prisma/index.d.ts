// Code generated by Prisma (prisma@1.18.1). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode, GraphQLSchema } from "graphql";
import { IResolvers } from "graphql-tools/dist/Interfaces";
import { makePrismaClientClass, BaseClientOptions } from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  auth: (where?: AuthWhereInput) => Promise<boolean>;
  config: (where?: ConfigWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
  widget: (where?: WidgetWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;
  $getAbstractResolvers(filterSchema?: GraphQLSchema | string): IResolvers;

  /**
   * Queries
   */

  auth: (where: AuthWhereUniqueInput) => Auth;
  auths: (
    args?: {
      where?: AuthWhereInput;
      orderBy?: AuthOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<AuthNode>;
  authsConnection: (
    args?: {
      where?: AuthWhereInput;
      orderBy?: AuthOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => AuthConnection;
  configs: (
    args?: {
      where?: ConfigWhereInput;
      orderBy?: ConfigOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<ConfigNode>;
  configsConnection: (
    args?: {
      where?: ConfigWhereInput;
      orderBy?: ConfigOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => ConfigConnection;
  user: (where: UserWhereUniqueInput) => User;
  users: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<UserNode>;
  usersConnection: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => UserConnection;
  widget: (where: WidgetWhereUniqueInput) => Widget;
  widgets: (
    args?: {
      where?: WidgetWhereInput;
      orderBy?: WidgetOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<WidgetNode>;
  widgetsConnection: (
    args?: {
      where?: WidgetWhereInput;
      orderBy?: WidgetOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => WidgetConnection;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createAuth: (data: AuthCreateInput) => Auth;
  updateAuth: (
    args: { data: AuthUpdateInput; where: AuthWhereUniqueInput }
  ) => Auth;
  updateManyAuths: (
    args: { data: AuthUpdateInput; where?: AuthWhereInput }
  ) => BatchPayload;
  upsertAuth: (
    args: {
      where: AuthWhereUniqueInput;
      create: AuthCreateInput;
      update: AuthUpdateInput;
    }
  ) => Auth;
  deleteAuth: (where: AuthWhereUniqueInput) => Auth;
  deleteManyAuths: (where?: AuthWhereInput) => BatchPayload;
  createConfig: (data: ConfigCreateInput) => Config;
  updateManyConfigs: (
    args: { data: ConfigUpdateInput; where?: ConfigWhereInput }
  ) => BatchPayload;
  deleteManyConfigs: (where?: ConfigWhereInput) => BatchPayload;
  createUser: (data: UserCreateInput) => User;
  updateUser: (
    args: { data: UserUpdateInput; where: UserWhereUniqueInput }
  ) => User;
  updateManyUsers: (
    args: { data: UserUpdateInput; where?: UserWhereInput }
  ) => BatchPayload;
  upsertUser: (
    args: {
      where: UserWhereUniqueInput;
      create: UserCreateInput;
      update: UserUpdateInput;
    }
  ) => User;
  deleteUser: (where: UserWhereUniqueInput) => User;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayload;
  createWidget: (data: WidgetCreateInput) => Widget;
  updateWidget: (
    args: { data: WidgetUpdateInput; where: WidgetWhereUniqueInput }
  ) => Widget;
  updateManyWidgets: (
    args: { data: WidgetUpdateInput; where?: WidgetWhereInput }
  ) => BatchPayload;
  upsertWidget: (
    args: {
      where: WidgetWhereUniqueInput;
      create: WidgetCreateInput;
      update: WidgetUpdateInput;
    }
  ) => Widget;
  deleteWidget: (where: WidgetWhereUniqueInput) => Widget;
  deleteManyWidgets: (where?: WidgetWhereInput) => BatchPayload;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  auth: (
    where?: AuthSubscriptionWhereInput
  ) => AuthSubscriptionPayloadSubscription;
  config: (
    where?: ConfigSubscriptionWhereInput
  ) => ConfigSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
  widget: (
    where?: WidgetSubscriptionWhereInput
  ) => WidgetSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type AuthOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "type_ASC"
  | "type_DESC"
  | "accessToken_ASC"
  | "accessToken_DESC"
  | "refreshToken_ASC"
  | "refreshToken_DESC"
  | "expire_ASC"
  | "expire_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type ConfigOrderByInput =
  | "posX_ASC"
  | "posX_DESC"
  | "posY_ASC"
  | "posY_DESC"
  | "height_ASC"
  | "height_DESC"
  | "minHeight_ASC"
  | "minHeight_DESC"
  | "maxHeight_ASC"
  | "maxHeight_DESC"
  | "width_ASC"
  | "width_DESC"
  | "minWidth_ASC"
  | "minWidth_DESC"
  | "maxWidth_ASC"
  | "maxWidth_DESC"
  | "static_ASC"
  | "static_DESC"
  | "specification_ASC"
  | "specification_DESC"
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type WidgetOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "slugname_ASC"
  | "slugname_DESC"
  | "enable_ASC"
  | "enable_DESC"
  | "needAuth_ASC"
  | "needAuth_DESC"
  | "authenticate_ASC"
  | "authenticate_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "passwd_ASC"
  | "passwd_DESC"
  | "email_ASC"
  | "email_DESC"
  | "token_ASC"
  | "token_DESC"
  | "connectionDate_ASC"
  | "connectionDate_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface AuthUpdateInput {
  type?: String;
  accessToken?: String;
  refreshToken?: String;
  expire?: Int;
}

export type AuthWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface ConfigUpdateDataInput {
  posX?: Int;
  posY?: Int;
  height?: Int;
  minHeight?: Int;
  maxHeight?: Int;
  width?: Int;
  minWidth?: Int;
  maxWidth?: Int;
  static?: Boolean;
  specification?: String;
}

export interface ConfigUpdateInput {
  posX?: Int;
  posY?: Int;
  height?: Int;
  minHeight?: Int;
  maxHeight?: Int;
  width?: Int;
  minWidth?: Int;
  maxWidth?: Int;
  static?: Boolean;
  specification?: String;
}

export interface UserWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  passwd?: String;
  passwd_not?: String;
  passwd_in?: String[] | String;
  passwd_not_in?: String[] | String;
  passwd_lt?: String;
  passwd_lte?: String;
  passwd_gt?: String;
  passwd_gte?: String;
  passwd_contains?: String;
  passwd_not_contains?: String;
  passwd_starts_with?: String;
  passwd_not_starts_with?: String;
  passwd_ends_with?: String;
  passwd_not_ends_with?: String;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  widgetSpec_every?: WidgetWhereInput;
  widgetSpec_some?: WidgetWhereInput;
  widgetSpec_none?: WidgetWhereInput;
  token?: String;
  token_not?: String;
  token_in?: String[] | String;
  token_not_in?: String[] | String;
  token_lt?: String;
  token_lte?: String;
  token_gt?: String;
  token_gte?: String;
  token_contains?: String;
  token_not_contains?: String;
  token_starts_with?: String;
  token_not_starts_with?: String;
  token_ends_with?: String;
  token_not_ends_with?: String;
  connectionDate?: DateTimeInput;
  connectionDate_not?: DateTimeInput;
  connectionDate_in?: DateTimeInput[] | DateTimeInput;
  connectionDate_not_in?: DateTimeInput[] | DateTimeInput;
  connectionDate_lt?: DateTimeInput;
  connectionDate_lte?: DateTimeInput;
  connectionDate_gt?: DateTimeInput;
  connectionDate_gte?: DateTimeInput;
  AND?: UserWhereInput[] | UserWhereInput;
  OR?: UserWhereInput[] | UserWhereInput;
  NOT?: UserWhereInput[] | UserWhereInput;
}

export interface ConfigCreateInput {
  posX: Int;
  posY: Int;
  height: Int;
  minHeight: Int;
  maxHeight: Int;
  width: Int;
  minWidth: Int;
  maxWidth: Int;
  static: Boolean;
  specification?: String;
}

export interface ConfigUpdateOneRequiredInput {
  create?: ConfigCreateInput;
  update?: ConfigUpdateDataInput;
  upsert?: ConfigUpsertNestedInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWhereInput;
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  NOT?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
}

export interface WidgetUpdateDataInput {
  name?: String;
  slugname?: String;
  config?: ConfigUpdateOneRequiredInput;
  enable?: Boolean;
  needAuth?: Boolean;
  authenticate?: Boolean;
  authentication?: AuthUpdateOneRequiredInput;
}

export interface ConfigWhereInput {
  posX?: Int;
  posX_not?: Int;
  posX_in?: Int[] | Int;
  posX_not_in?: Int[] | Int;
  posX_lt?: Int;
  posX_lte?: Int;
  posX_gt?: Int;
  posX_gte?: Int;
  posY?: Int;
  posY_not?: Int;
  posY_in?: Int[] | Int;
  posY_not_in?: Int[] | Int;
  posY_lt?: Int;
  posY_lte?: Int;
  posY_gt?: Int;
  posY_gte?: Int;
  height?: Int;
  height_not?: Int;
  height_in?: Int[] | Int;
  height_not_in?: Int[] | Int;
  height_lt?: Int;
  height_lte?: Int;
  height_gt?: Int;
  height_gte?: Int;
  minHeight?: Int;
  minHeight_not?: Int;
  minHeight_in?: Int[] | Int;
  minHeight_not_in?: Int[] | Int;
  minHeight_lt?: Int;
  minHeight_lte?: Int;
  minHeight_gt?: Int;
  minHeight_gte?: Int;
  maxHeight?: Int;
  maxHeight_not?: Int;
  maxHeight_in?: Int[] | Int;
  maxHeight_not_in?: Int[] | Int;
  maxHeight_lt?: Int;
  maxHeight_lte?: Int;
  maxHeight_gt?: Int;
  maxHeight_gte?: Int;
  width?: Int;
  width_not?: Int;
  width_in?: Int[] | Int;
  width_not_in?: Int[] | Int;
  width_lt?: Int;
  width_lte?: Int;
  width_gt?: Int;
  width_gte?: Int;
  minWidth?: Int;
  minWidth_not?: Int;
  minWidth_in?: Int[] | Int;
  minWidth_not_in?: Int[] | Int;
  minWidth_lt?: Int;
  minWidth_lte?: Int;
  minWidth_gt?: Int;
  minWidth_gte?: Int;
  maxWidth?: Int;
  maxWidth_not?: Int;
  maxWidth_in?: Int[] | Int;
  maxWidth_not_in?: Int[] | Int;
  maxWidth_lt?: Int;
  maxWidth_lte?: Int;
  maxWidth_gt?: Int;
  maxWidth_gte?: Int;
  static?: Boolean;
  static_not?: Boolean;
  specification?: String;
  specification_not?: String;
  specification_in?: String[] | String;
  specification_not_in?: String[] | String;
  specification_lt?: String;
  specification_lte?: String;
  specification_gt?: String;
  specification_gte?: String;
  specification_contains?: String;
  specification_not_contains?: String;
  specification_starts_with?: String;
  specification_not_starts_with?: String;
  specification_ends_with?: String;
  specification_not_ends_with?: String;
  AND?: ConfigWhereInput[] | ConfigWhereInput;
  OR?: ConfigWhereInput[] | ConfigWhereInput;
  NOT?: ConfigWhereInput[] | ConfigWhereInput;
}

export interface WidgetUpdateWithWhereUniqueNestedInput {
  where: WidgetWhereUniqueInput;
  data: WidgetUpdateDataInput;
}

export interface AuthSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: AuthWhereInput;
  AND?: AuthSubscriptionWhereInput[] | AuthSubscriptionWhereInput;
  OR?: AuthSubscriptionWhereInput[] | AuthSubscriptionWhereInput;
  NOT?: AuthSubscriptionWhereInput[] | AuthSubscriptionWhereInput;
}

export interface WidgetUpdateManyInput {
  create?: WidgetCreateInput[] | WidgetCreateInput;
  update?:
    | WidgetUpdateWithWhereUniqueNestedInput[]
    | WidgetUpdateWithWhereUniqueNestedInput;
  upsert?:
    | WidgetUpsertWithWhereUniqueNestedInput[]
    | WidgetUpsertWithWhereUniqueNestedInput;
  delete?: WidgetWhereUniqueInput[] | WidgetWhereUniqueInput;
  connect?: WidgetWhereUniqueInput[] | WidgetWhereUniqueInput;
  disconnect?: WidgetWhereUniqueInput[] | WidgetWhereUniqueInput;
}

export interface WidgetUpsertWithWhereUniqueNestedInput {
  where: WidgetWhereUniqueInput;
  update: WidgetUpdateDataInput;
  create: WidgetCreateInput;
}

export type WidgetWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export type UserWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface UserUpdateInput {
  name?: String;
  passwd?: String;
  email?: String;
  widgetSpec?: WidgetUpdateManyInput;
  token?: String;
  connectionDate?: DateTimeInput;
}

export interface WidgetWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  slugname?: String;
  slugname_not?: String;
  slugname_in?: String[] | String;
  slugname_not_in?: String[] | String;
  slugname_lt?: String;
  slugname_lte?: String;
  slugname_gt?: String;
  slugname_gte?: String;
  slugname_contains?: String;
  slugname_not_contains?: String;
  slugname_starts_with?: String;
  slugname_not_starts_with?: String;
  slugname_ends_with?: String;
  slugname_not_ends_with?: String;
  config?: ConfigWhereInput;
  enable?: Boolean;
  enable_not?: Boolean;
  needAuth?: Boolean;
  needAuth_not?: Boolean;
  authenticate?: Boolean;
  authenticate_not?: Boolean;
  authentication?: AuthWhereInput;
  AND?: WidgetWhereInput[] | WidgetWhereInput;
  OR?: WidgetWhereInput[] | WidgetWhereInput;
  NOT?: WidgetWhereInput[] | WidgetWhereInput;
}

export interface AuthCreateOneInput {
  create?: AuthCreateInput;
  connect?: AuthWhereUniqueInput;
}

export interface ConfigUpsertNestedInput {
  update: ConfigUpdateDataInput;
  create: ConfigCreateInput;
}

export interface ConfigCreateOneInput {
  create?: ConfigCreateInput;
}

export interface ConfigSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: ConfigWhereInput;
  AND?: ConfigSubscriptionWhereInput[] | ConfigSubscriptionWhereInput;
  OR?: ConfigSubscriptionWhereInput[] | ConfigSubscriptionWhereInput;
  NOT?: ConfigSubscriptionWhereInput[] | ConfigSubscriptionWhereInput;
}

export interface WidgetUpdateInput {
  name?: String;
  slugname?: String;
  config?: ConfigUpdateOneRequiredInput;
  enable?: Boolean;
  needAuth?: Boolean;
  authenticate?: Boolean;
  authentication?: AuthUpdateOneRequiredInput;
}

export interface AuthUpdateDataInput {
  type?: String;
  accessToken?: String;
  refreshToken?: String;
  expire?: Int;
}

export interface UserCreateInput {
  name: String;
  passwd: String;
  email: String;
  widgetSpec?: WidgetCreateManyInput;
  token?: String;
  connectionDate?: DateTimeInput;
}

export interface WidgetCreateManyInput {
  create?: WidgetCreateInput[] | WidgetCreateInput;
  connect?: WidgetWhereUniqueInput[] | WidgetWhereUniqueInput;
}

export interface WidgetCreateInput {
  name: String;
  slugname: String;
  config: ConfigCreateOneInput;
  enable: Boolean;
  needAuth: Boolean;
  authenticate: Boolean;
  authentication: AuthCreateOneInput;
}

export interface AuthCreateInput {
  type: String;
  accessToken: String;
  refreshToken: String;
  expire: Int;
}

export interface AuthUpdateOneRequiredInput {
  create?: AuthCreateInput;
  update?: AuthUpdateDataInput;
  upsert?: AuthUpsertNestedInput;
  connect?: AuthWhereUniqueInput;
}

export interface AuthUpsertNestedInput {
  update: AuthUpdateDataInput;
  create: AuthCreateInput;
}

export interface AuthWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  type?: String;
  type_not?: String;
  type_in?: String[] | String;
  type_not_in?: String[] | String;
  type_lt?: String;
  type_lte?: String;
  type_gt?: String;
  type_gte?: String;
  type_contains?: String;
  type_not_contains?: String;
  type_starts_with?: String;
  type_not_starts_with?: String;
  type_ends_with?: String;
  type_not_ends_with?: String;
  accessToken?: String;
  accessToken_not?: String;
  accessToken_in?: String[] | String;
  accessToken_not_in?: String[] | String;
  accessToken_lt?: String;
  accessToken_lte?: String;
  accessToken_gt?: String;
  accessToken_gte?: String;
  accessToken_contains?: String;
  accessToken_not_contains?: String;
  accessToken_starts_with?: String;
  accessToken_not_starts_with?: String;
  accessToken_ends_with?: String;
  accessToken_not_ends_with?: String;
  refreshToken?: String;
  refreshToken_not?: String;
  refreshToken_in?: String[] | String;
  refreshToken_not_in?: String[] | String;
  refreshToken_lt?: String;
  refreshToken_lte?: String;
  refreshToken_gt?: String;
  refreshToken_gte?: String;
  refreshToken_contains?: String;
  refreshToken_not_contains?: String;
  refreshToken_starts_with?: String;
  refreshToken_not_starts_with?: String;
  refreshToken_ends_with?: String;
  refreshToken_not_ends_with?: String;
  expire?: Int;
  expire_not?: Int;
  expire_in?: Int[] | Int;
  expire_not_in?: Int[] | Int;
  expire_lt?: Int;
  expire_lte?: Int;
  expire_gt?: Int;
  expire_gte?: Int;
  AND?: AuthWhereInput[] | AuthWhereInput;
  OR?: AuthWhereInput[] | AuthWhereInput;
  NOT?: AuthWhereInput[] | AuthWhereInput;
}

export interface WidgetSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: WidgetWhereInput;
  AND?: WidgetSubscriptionWhereInput[] | WidgetSubscriptionWhereInput;
  OR?: WidgetSubscriptionWhereInput[] | WidgetSubscriptionWhereInput;
  NOT?: WidgetSubscriptionWhereInput[] | WidgetSubscriptionWhereInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface WidgetPreviousValuesNode {
  id: ID_Output;
  name: String;
  slugname: String;
  enable: Boolean;
  needAuth: Boolean;
  authenticate: Boolean;
}

export interface WidgetPreviousValues
  extends Promise<WidgetPreviousValuesNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  slugname: () => Promise<String>;
  enable: () => Promise<Boolean>;
  needAuth: () => Promise<Boolean>;
  authenticate: () => Promise<Boolean>;
}

export interface WidgetPreviousValuesSubscription
  extends Promise<AsyncIterator<WidgetPreviousValuesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  slugname: () => Promise<AsyncIterator<String>>;
  enable: () => Promise<AsyncIterator<Boolean>>;
  needAuth: () => Promise<AsyncIterator<Boolean>>;
  authenticate: () => Promise<AsyncIterator<Boolean>>;
}

export interface AggregateConfigNode {
  count: Int;
}

export interface AggregateConfig
  extends Promise<AggregateConfigNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateConfigSubscription
  extends Promise<AsyncIterator<AggregateConfigNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AuthConnectionNode {}

export interface AuthConnection
  extends Promise<AuthConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = FragmentableArray<AuthEdgeNode>>() => T;
  aggregate: <T = AggregateAuth>() => T;
}

export interface AuthConnectionSubscription
  extends Promise<AsyncIterator<AuthConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<AuthEdgeSubscription>>>() => T;
  aggregate: <T = AggregateAuthSubscription>() => T;
}

export interface ConfigEdgeNode {
  cursor: String;
}

export interface ConfigEdge extends Promise<ConfigEdgeNode>, Fragmentable {
  node: <T = Config>() => T;
  cursor: () => Promise<String>;
}

export interface ConfigEdgeSubscription
  extends Promise<AsyncIterator<ConfigEdgeNode>>,
    Fragmentable {
  node: <T = ConfigSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface PageInfoNode {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfo extends Promise<PageInfoNode>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfoNode>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface ConfigConnectionNode {}

export interface ConfigConnection
  extends Promise<ConfigConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = FragmentableArray<ConfigEdgeNode>>() => T;
  aggregate: <T = AggregateConfig>() => T;
}

export interface ConfigConnectionSubscription
  extends Promise<AsyncIterator<ConfigConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ConfigEdgeSubscription>>>() => T;
  aggregate: <T = AggregateConfigSubscription>() => T;
}

export interface BatchPayloadNode {
  count: Long;
}

export interface BatchPayload extends Promise<BatchPayloadNode>, Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayloadNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface ConfigNode {
  posX: Int;
  posY: Int;
  height: Int;
  minHeight: Int;
  maxHeight: Int;
  width: Int;
  minWidth: Int;
  maxWidth: Int;
  static: Boolean;
  specification?: String;
}

export interface Config extends Promise<ConfigNode>, Fragmentable {
  posX: () => Promise<Int>;
  posY: () => Promise<Int>;
  height: () => Promise<Int>;
  minHeight: () => Promise<Int>;
  maxHeight: () => Promise<Int>;
  width: () => Promise<Int>;
  minWidth: () => Promise<Int>;
  maxWidth: () => Promise<Int>;
  static: () => Promise<Boolean>;
  specification: () => Promise<String>;
}

export interface ConfigSubscription
  extends Promise<AsyncIterator<ConfigNode>>,
    Fragmentable {
  posX: () => Promise<AsyncIterator<Int>>;
  posY: () => Promise<AsyncIterator<Int>>;
  height: () => Promise<AsyncIterator<Int>>;
  minHeight: () => Promise<AsyncIterator<Int>>;
  maxHeight: () => Promise<AsyncIterator<Int>>;
  width: () => Promise<AsyncIterator<Int>>;
  minWidth: () => Promise<AsyncIterator<Int>>;
  maxWidth: () => Promise<AsyncIterator<Int>>;
  static: () => Promise<AsyncIterator<Boolean>>;
  specification: () => Promise<AsyncIterator<String>>;
}

export interface AggregateWidgetNode {
  count: Int;
}

export interface AggregateWidget
  extends Promise<AggregateWidgetNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateWidgetSubscription
  extends Promise<AsyncIterator<AggregateWidgetNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AuthNode {
  id: ID_Output;
  type: String;
  accessToken: String;
  refreshToken: String;
  expire: Int;
}

export interface Auth extends Promise<AuthNode>, Fragmentable {
  id: () => Promise<ID_Output>;
  type: () => Promise<String>;
  accessToken: () => Promise<String>;
  refreshToken: () => Promise<String>;
  expire: () => Promise<Int>;
}

export interface AuthSubscription
  extends Promise<AsyncIterator<AuthNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  type: () => Promise<AsyncIterator<String>>;
  accessToken: () => Promise<AsyncIterator<String>>;
  refreshToken: () => Promise<AsyncIterator<String>>;
  expire: () => Promise<AsyncIterator<Int>>;
}

export interface WidgetConnectionNode {}

export interface WidgetConnection
  extends Promise<WidgetConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = FragmentableArray<WidgetEdgeNode>>() => T;
  aggregate: <T = AggregateWidget>() => T;
}

export interface WidgetConnectionSubscription
  extends Promise<AsyncIterator<WidgetConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<WidgetEdgeSubscription>>>() => T;
  aggregate: <T = AggregateWidgetSubscription>() => T;
}

export interface AuthSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface AuthSubscriptionPayload
  extends Promise<AuthSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Auth>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = AuthPreviousValues>() => T;
}

export interface AuthSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<AuthSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = AuthSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = AuthPreviousValuesSubscription>() => T;
}

export interface UserEdgeNode {
  cursor: String;
}

export interface UserEdge extends Promise<UserEdgeNode>, Fragmentable {
  node: <T = User>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdgeNode>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AuthPreviousValuesNode {
  id: ID_Output;
  type: String;
  accessToken: String;
  refreshToken: String;
  expire: Int;
}

export interface AuthPreviousValues
  extends Promise<AuthPreviousValuesNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  type: () => Promise<String>;
  accessToken: () => Promise<String>;
  refreshToken: () => Promise<String>;
  expire: () => Promise<Int>;
}

export interface AuthPreviousValuesSubscription
  extends Promise<AsyncIterator<AuthPreviousValuesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  type: () => Promise<AsyncIterator<String>>;
  accessToken: () => Promise<AsyncIterator<String>>;
  refreshToken: () => Promise<AsyncIterator<String>>;
  expire: () => Promise<AsyncIterator<Int>>;
}

export interface WidgetNode {
  id: ID_Output;
  name: String;
  slugname: String;
  enable: Boolean;
  needAuth: Boolean;
  authenticate: Boolean;
}

export interface Widget extends Promise<WidgetNode>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  slugname: () => Promise<String>;
  config: <T = Config>() => T;
  enable: () => Promise<Boolean>;
  needAuth: () => Promise<Boolean>;
  authenticate: () => Promise<Boolean>;
  authentication: <T = Auth>() => T;
}

export interface WidgetSubscription
  extends Promise<AsyncIterator<WidgetNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  slugname: () => Promise<AsyncIterator<String>>;
  config: <T = ConfigSubscription>() => T;
  enable: () => Promise<AsyncIterator<Boolean>>;
  needAuth: () => Promise<AsyncIterator<Boolean>>;
  authenticate: () => Promise<AsyncIterator<Boolean>>;
  authentication: <T = AuthSubscription>() => T;
}

export interface AggregateAuthNode {
  count: Int;
}

export interface AggregateAuth
  extends Promise<AggregateAuthNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateAuthSubscription
  extends Promise<AsyncIterator<AggregateAuthNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserNode {
  id: ID_Output;
  name: String;
  passwd: String;
  email: String;
  token?: String;
  connectionDate?: DateTimeOutput;
}

export interface User extends Promise<UserNode>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  passwd: () => Promise<String>;
  email: () => Promise<String>;
  widgetSpec: <T = FragmentableArray<WidgetNode>>(
    args?: {
      where?: WidgetWhereInput;
      orderBy?: WidgetOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  token: () => Promise<String>;
  connectionDate: () => Promise<DateTimeOutput>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<UserNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  passwd: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  widgetSpec: <T = Promise<AsyncIterator<WidgetSubscription>>>(
    args?: {
      where?: WidgetWhereInput;
      orderBy?: WidgetOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  token: () => Promise<AsyncIterator<String>>;
  connectionDate: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface AuthEdgeNode {
  cursor: String;
}

export interface AuthEdge extends Promise<AuthEdgeNode>, Fragmentable {
  node: <T = Auth>() => T;
  cursor: () => Promise<String>;
}

export interface AuthEdgeSubscription
  extends Promise<AsyncIterator<AuthEdgeNode>>,
    Fragmentable {
  node: <T = AuthSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ConfigPreviousValuesNode {
  posX: Int;
  posY: Int;
  height: Int;
  minHeight: Int;
  maxHeight: Int;
  width: Int;
  minWidth: Int;
  maxWidth: Int;
  static: Boolean;
  specification?: String;
}

export interface ConfigPreviousValues
  extends Promise<ConfigPreviousValuesNode>,
    Fragmentable {
  posX: () => Promise<Int>;
  posY: () => Promise<Int>;
  height: () => Promise<Int>;
  minHeight: () => Promise<Int>;
  maxHeight: () => Promise<Int>;
  width: () => Promise<Int>;
  minWidth: () => Promise<Int>;
  maxWidth: () => Promise<Int>;
  static: () => Promise<Boolean>;
  specification: () => Promise<String>;
}

export interface ConfigPreviousValuesSubscription
  extends Promise<AsyncIterator<ConfigPreviousValuesNode>>,
    Fragmentable {
  posX: () => Promise<AsyncIterator<Int>>;
  posY: () => Promise<AsyncIterator<Int>>;
  height: () => Promise<AsyncIterator<Int>>;
  minHeight: () => Promise<AsyncIterator<Int>>;
  maxHeight: () => Promise<AsyncIterator<Int>>;
  width: () => Promise<AsyncIterator<Int>>;
  minWidth: () => Promise<AsyncIterator<Int>>;
  maxWidth: () => Promise<AsyncIterator<Int>>;
  static: () => Promise<AsyncIterator<Boolean>>;
  specification: () => Promise<AsyncIterator<String>>;
}

export interface WidgetEdgeNode {
  cursor: String;
}

export interface WidgetEdge extends Promise<WidgetEdgeNode>, Fragmentable {
  node: <T = Widget>() => T;
  cursor: () => Promise<String>;
}

export interface WidgetEdgeSubscription
  extends Promise<AsyncIterator<WidgetEdgeNode>>,
    Fragmentable {
  node: <T = WidgetSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface UserSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface UserSubscriptionPayload
  extends Promise<UserSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = User>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValues>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValuesNode {
  id: ID_Output;
  name: String;
  passwd: String;
  email: String;
  token?: String;
  connectionDate?: DateTimeOutput;
}

export interface UserPreviousValues
  extends Promise<UserPreviousValuesNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  passwd: () => Promise<String>;
  email: () => Promise<String>;
  token: () => Promise<String>;
  connectionDate: () => Promise<DateTimeOutput>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValuesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  passwd: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  token: () => Promise<AsyncIterator<String>>;
  connectionDate: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface WidgetSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface WidgetSubscriptionPayload
  extends Promise<WidgetSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Widget>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = WidgetPreviousValues>() => T;
}

export interface WidgetSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<WidgetSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = WidgetSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = WidgetPreviousValuesSubscription>() => T;
}

export interface UserConnectionNode {}

export interface UserConnection
  extends Promise<UserConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = FragmentableArray<UserEdgeNode>>() => T;
  aggregate: <T = AggregateUser>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface AggregateUserNode {
  count: Int;
}

export interface AggregateUser
  extends Promise<AggregateUserNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUserNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ConfigSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface ConfigSubscriptionPayload
  extends Promise<ConfigSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Config>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ConfigPreviousValues>() => T;
}

export interface ConfigSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ConfigSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ConfigSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ConfigPreviousValuesSubscription>() => T;
}

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

export type Long = string;

/**
 * Type Defs
 */

export const prisma: Prisma;
